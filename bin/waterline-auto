#!/usr/bin/env node

'use strict';

/**
 * Module dependencies
 */

const inspect = require('util').inspect;
const fs = require('fs-extra');
const async = require('co').wrap;
const _ = require('lodash');
const debug = require('debug')('waterline-auto:bin');
const lib = require('../');
const format = require('js-beautify')['js_beautify'];
const pkgVersion = require('../package').version;
const argv = require('minimist')(process.argv.slice(2), {
  alias: {
    h: 'host',
    p: 'port',
    u: 'user',
    a: 'password', // authentication
    d: 'database',
    t: 'tables',
    table: 'tables', // torrlent,
    r: 'raw-type',
    c: 'comment'
  },
  boolean: ['raw-type', 'comment', 'sequelize-log', 'help'],
  default: {
    comment: true,
    help: false,
    'raw-type': true,
    'sequelize-log': true
  }
});

if (process.argv.length <= 2) argv.help = true;
if (argv.help) {
  console.log(`
    waterline-auto@${ pkgVersion } - auto generate model from your db

    Options
      -h, --host              host
      -p, --port              port
      -u, --user              username
      -a, --password          password
      -d, --database          database
      -t, --table, --tables   table names
      -r, --raw-type          add \`rawType\` in output, default true
      -c, --comment           add \`comment\` in output, default true
      --sequelize-log         sequelize \`logging\`, default true
      --help                  show this help message
  `);
  process.exit();
}

const main = async(function*() {
  const auto = yield lib.getTables({
    host: argv.host,
    port: argv.port,
    user: argv.user,
    password: argv.password,
    database: argv.database,
    tables: (argv.tables || '').split(',').map(_.trim).filter(Boolean),
    sequelizeLog: argv['sequelize-log']
  });
  const tables = auto.tables;
  debug('tables: %j', tables);

  const transformed = {};
  for (let tableName in tables) {
    const table = tables[tableName];
    const o = yield lib.transform({
      dbName: argv.database,
      tableName: tableName,
      table: table,
      rawType: argv['raw-type'],
      comment: argv.comment,
      seqAuto: auto
    });
    transformed[tableName] = o;
  }

  const formatOptions = fs.readJsonSync(__dirname + '/../.jsbeautifyrc');
  _.each(transformed, (v, k) => {
    const filename = _.upperFirst(_.camelCase(k));
    const prefix = '\'use strict\';\n\nmodule.exports = ';
    let content = prefix + inspect(v, {
      depth: null
    }) + ';';
    content = format(content, formatOptions);
    fs.writeFileSync('./' + filename + '.js', content, 'utf8');
  });

  // end
  process.exit();
});

main().catch(e => console.error(e.stack || e));